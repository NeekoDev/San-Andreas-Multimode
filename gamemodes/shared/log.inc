#if defined _inc_log
	#undef _inc_log
#endif

#if defined _log_included
	#endinput
#endif
#define _log_included

/*
* ==============================================================================
* Dependencies
* ==============================================================================
*/

#include <YSI_Coding\y_va>

/*
* ==============================================================================
* Constants
* ==============================================================================
*/

/*
* ==============================================================================
* Forwards
* ==============================================================================
*/

/*
* ==============================================================================
* Enums
* ==============================================================================
*/

/*
* ==============================================================================
* Declarations
* ==============================================================================
*/

/*
* ==============================================================================
* Internal Packages
* ==============================================================================
*/

/*
* ==============================================================================
* Lifecycle events
* ==============================================================================
*/

/*
* ==============================================================================
* Functions
* ==============================================================================
*/

Log_Info(const text[], va_args<>)
{
    new
		gs_Buffer[256];
		
	va_format(gs_Buffer, sizeof(gs_Buffer), text, va_start<1>);
    strins(gs_Buffer, "[INFO] ", 0);

    print(gs_Buffer);
}

Log_Error(const text[], va_args<>)
{
    new
		gs_Buffer[256];
		
	va_format(gs_Buffer, sizeof(gs_Buffer), text, va_start<1>);
    strins(gs_Buffer, "[ERROR] ", 0);

    print(gs_Buffer);
    _PrintBufferAmxBacktrace();
}

Log_Fatal(const text[], va_args<>)
{
    new
		gs_Buffer[256];
		
	va_format(gs_Buffer, sizeof(gs_Buffer), text, va_start<1>);
    strins(gs_Buffer, "[FATAL] ", 0);

    print(gs_Buffer);
    _PrintBufferAmxBacktrace(true);
}

/*
* ==============================================================================
* Private functions
* ==============================================================================
*/

static stock _PrintBufferAmxBacktrace(bool:crash = false) 
{
	PrintAmxBacktrace();

	if(crash) {
		new File:f = fopen("nonexistentfile", io_read), tmp[1];
		fread(f, tmp);
		fclose(f);
	}
}

/*
* ==============================================================================
* Dialogs
* ==============================================================================
*/

/*
* ==============================================================================
* Timers
* ==============================================================================
*/

/*
* ==============================================================================
* Commands
* ==============================================================================
*/

/*
* ==============================================================================
* Get / Set
* ==============================================================================
*/