/*
    ____    _         __  __ __  __ 
   / ___|  / \       |  \/  |  \/  |
   \___ \ / _ \ _____| |\/| | |\/| |
    ___) / ___ \_____| |  | | |  | |
   |____/_/   \_\    |_|  |_|_|  |_|            

    @File       core.inc
    @Author     Neeko

    COPYRIGHT Â© 2021 - San Andreas Multimode
*/

#if defined _inc_race_core
	#undef _inc_race_core
#endif

#if defined _race_core_included
	#endinput
#endif
#define _race_core_included

/*
* ==============================================================================
* Dependencies
* ==============================================================================
*/

#include <YSI_Coding\y_hooks>
#include <YSI_Data\y_iterate>

/*
* ==============================================================================
* Constants
* ==============================================================================
*/

#define MAX_RACE                (128)
#define INVALID_RACE_ID         (-1)

/*
* ==============================================================================
* Forwards
* ==============================================================================
*/

forward Race_OnLoad();

/*
* ==============================================================================
* Enums
* ==============================================================================
*/

enum E_RACE_DATA 
{
    r_Id,
}

/*
* ==============================================================================
* Declarations
* ==============================================================================
*/

static race_Data[MAX_RACE][E_RACE_DATA];
new Iterator:race_List<MAX_RACE>;

/*
* ==============================================================================
* Internal Packages
* ==============================================================================
*/

/*
* ==============================================================================
* Lifecycle events
* ==============================================================================
*/

hook OnGameModeInit()
{
    Iter_Clear(race_List);

    return 1;
}

hook OnDatabaseInitialized()
{
    _Race_Load();

    return 1;
}

/*
* ==============================================================================
* Internal events
* ==============================================================================
*/

public Race_OnLoad()
{
    if(cache_num_rows() > 0) {
        new raceid = INVALID_RACE_ID;

        for(new i = 0, j = cache_num_rows(); i < j; i++) {
            raceid = Iter_Free(race_List);

            if(raceid == ITER_NONE) {
                Log_Error("MAX_RACE reached, please increase this constant.");
                return INVALID_RACE_ID;
            }

            Iter_Add(race_List, raceid);

            if(!Iter_Contains(race_List, raceid)) {
                Log_Error("Error when added id to race_List.");
                return INVALID_RACE_ID;
            }

            cache_get_value_name_int(i, "Id", race_Data[raceid][r_Id]);
        }
    }

    Log_Info("%d races loaded.", cache_num_rows());

    return 1;
}

/*
* ==============================================================================
* Functions
* ==============================================================================
*/

/*
* ==============================================================================
* Private functions
* ==============================================================================
*/

static _Race_Load() 
{
    mysql_tquery(Database_GetHandler(), "SELECT * FROM `"SQL_TABLE_RACE"`", "Race_OnLoad");

    return 1;
}

/*
* ==============================================================================
* Dialogs
* ==============================================================================
*/

/*
* ==============================================================================
* Timers
* ==============================================================================
*/

/*
* ==============================================================================
* Commands
* ==============================================================================
*/

/*
* ==============================================================================
* Get / Set
* ==============================================================================
*/